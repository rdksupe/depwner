name: Build and Release Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write # Needed for creating releases and uploading assets

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Add Node.js versions if you want to test on multiple, otherwise use one
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run make

      - name: Upload artifact - Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-linux-${{ github.sha }}
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm
            out/make/**/*.AppImage 
            # Add other Linux formats if configured, like .tar.gz, .snap

      - name: Upload artifact - macOS
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-macos-${{ github.sha }}
          path: out/make/**/*.zip # maker-zip produces a .zip

      - name: Upload artifact - Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-windows-${{ github.sha }}
          path: |
            out/make/**/*.exe # Squirrel.Windows produces an .exe installer
            out/make/**/*.nupkg # Squirrel.Windows may also produce .nupkg files
            # Add other Windows formats if configured

  create-release:
    name: Create GitHub Release
    needs: build # Depends on the build job for all OS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run on push to main

    steps:
      - name: Checkout code (for version info)
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts # All artifacts will be downloaded here
          # No name specified, so it downloads all artifacts from the run

      - name: Get app version
        id: get_version
        run: echo "APP_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.APP_VERSION }}-${{ github.sha }} # Unique tag including SHA
          name: Release v${{ env.APP_VERSION }}
          body: "Automated release for version ${{ env.APP_VERSION }}."
          files: |
            dist-artifacts/electron-app-linux-${{ github.sha }}/*
            dist-artifacts/electron-app-macos-${{ github.sha }}/*
            dist-artifacts/electron-app-windows-${{ github.sha }}/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.RUNNER_TOKEN }}
